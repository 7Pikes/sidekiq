#!/usr/bin/env ruby

require 'fileutils'
require 'sidekiq/api'

class Sidekiqctl
  DEFAULT_KILL_TIMEOUT = 10
  DEFAULT_STOP_TIMEOUT = 60

  attr_reader :stage, :pidfile, :kill_timeout, :stop_timeout

  def self.print_usage
    puts "#{File.basename($0)} - stop a Sidekiq process from the command line."
    puts
    puts "Usage: #{File.basename($0)} <command> <pidfile> [kill_timeout [stop_timeout]]"
    puts " where <command> is either 'quiet' or 'stop'"
    puts "       <pidfile> is path to a pidfile"
    puts "       [kill_timeout] is number of seconds to wait until Sidekiq exits"
    puts "       (default: #{Sidekiqctl::DEFAULT_KILL_TIMEOUT}), after which Sidekiq will be KILL'd"
    puts "       [stop_timeout] is number of seconds to wait for all jobs to complete gracefully when using shutdown"
    puts "       (default: #{Sidekiqctl::DEFAULT_STOP_TIMEOUT})"
    puts
    puts "Be sure to set the kill_timeout LONGER than Sidekiq's -t timeout.  If you want"
    puts "to wait 60 seconds for jobs to finish, use `sidekiq -t 60` and `sidekiqctl stop"
    puts " path_to_pidfile 61`"
    puts
  end

  def initialize(stage, pidfile, kill_timeout, stop_timeout)
    @stage = stage
    @pidfile = pidfile
    @kill_timeout = kill_timeout
    @stop_timeout = stop_timeout

    done('No pidfile given', :error) if !pidfile
    done("Pidfile #{pidfile} does not exist", :warn) if !File.exist?(pidfile)
    done('Invalid pidfile content', :error) if pid == 0

    fetch_process

    begin
      send(stage)
    rescue NoMethodError
      done "Invalid command: #{stage}", :error
    end
  end

  def fetch_process
    Process.getpgid(pid)
  rescue Errno::ESRCH
    done "Process doesn't exist", :error
  end

  def done(msg, error = nil)
    puts msg
    exit(exit_signal(error))
  end

  def exit_signal(error)
    (error == :error) ? 1 : 0
  end

  def pid
    @pid ||= File.read(pidfile).to_i
  end

  def quiet
    `kill -USR1 #{pid}`
  end

  def stop
    `kill -TERM #{pid}`
    kill_timeout.times do
      begin
        Process.getpgid(pid)
      rescue Errno::ESRCH
        FileUtils.rm_f pidfile
        done 'Sidekiq shut down gracefully.'
      end
      sleep 1
    end
    `kill -9 #{pid}`
    FileUtils.rm_f pidfile
    done 'Sidekiq shut down forcefully.'
  end

  def shutdown
    quiet
    workers = Sidekiq::Workers.new
    stop_timeout.times do
      until workers.size == 0
        sleep 1
      end
    end
    stop
  end
end

if ARGV.length < 2
  Sidekiqctl.print_usage
else
  stage = ARGV[0]
  pidfile = ARGV[1]
  kill_timeout = ARGV[2].to_i
  kill_timeout = Sidekiqctl::DEFAULT_KILL_TIMEOUT if kill_timeout == 0
  stop_timeout = ARGV[3].to_i
  stop_timeout = Sidekiqctl::DEFAULT_STOP_TIMEOUT if stop_timeout == 0

  Sidekiqctl.new(stage, pidfile, kill_timeout, stop_timeout)
end
